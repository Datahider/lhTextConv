<?php

/**
 * Description of lhTextConv
 * 
 * a set of static methods for text conversion, filtering and comparition
 *
 * @author Peter Datahider
 */
class lhTextConv { 
    
    private static $translit_map = [ 
        '–ê' => 'A', '–ë' => 'B', '–í' => 'V', '–ì' => 'G', '–î' => 'D', '–ï' => 'E', '–Å' => 'Jo', '–ñ' => 'Zh', '–ó' => 'Z', '–ò' => 'I',
        '–ô' => 'J', '–ö' => 'K', '–õ' => 'L', '–ú' => 'M', '–ù' => 'N', '–û' => 'O', '–ü' => 'P', '–†' => 'R', '–°' => 'S', '–¢' => 'T', 
        '–£' => 'U', '–§' => 'F', '–•' => 'H', '–¶' => 'Ts', '–ß' => 'Ch', '–®' => 'Sh', '–©' => 'Sch', '–™' => '', '–´' => 'Y', '–¨' => '',  
        '–≠' => 'E', '–Æ' => 'Ju', '–Ø' => 'Ja', 
        '–∞' => 'a', '–±' => 'b', '–≤' => 'v', '–≥' => 'g', '–¥' => 'd', '–µ' => 'e', '—ë' => 'jo', '–∂' => 'zh', '–∑' => 'z', '–∏' => 'i',
        '–π' => 'j', '–∫' => 'k', '–ª' => 'l', '–º' => 'm', '–Ω' => 'n', '–æ' => 'o', '–ø' => 'p', '—Ä' => 'r', '—Å' => 's', '—Ç' => 't', 
        '—É' => 'u', '—Ñ' => 'f', '—Ö' => 'h', '—Ü' => 'ts', '—á' => 'ch', '—à' => 'sh', '—â' => 'sch', '—ä' => '', '—ã' => 'y', '—å' => '',  
        '—ç' => 'e', '—é' => 'ju', '—è' => 'ja' 
    ];

    private static $smiles_map = [
        ':wink:' => 'üòâ'
    ];

    public static function metaphone($text) {
        $result = mb_strtolower($text, 'UTF-8');
        $result = self::removeUnreadable($result);
        $result = self::shrinkDuplicates($result);
        $result = self::replaceVovels($result);
        $result = self::replaceConsonants($result);
        $result = self::shrinkDuplicates($result);
        return mb_strtoupper($result, 'UTF-8');
    }
    
    public static function translit($text) {
        $textarray = preg_split("//u", $text.' '); // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–±–µ–ª –¥–ª—è —Ñ–æ–∫—É—Å–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏
        $result = '';
        $last_len = 0;
        $prev_upper = false;
        $prew_upper = false;
        foreach ($textarray as $l) {
            //echo "$l '$prew_upper' '$prev_upper'\n";
            if (isset(self::$translit_map[$l])) {
                if (($last_len > 1) && self::is_upper($l)) {
                    $result = preg_replace_callback("/(.{{$last_len}})$/", function ($matches) { return strtoupper($matches[1]);}, $result);
                }
                $result .= self::$translit_map[$l];
                $last_len = strlen(self::$translit_map[$l]);
                $prew_upper = $prev_upper;
                $prev_upper = self::is_upper($l);
            } else {
                if (preg_match("/^\s$/", $l) && $prew_upper && ($last_len > 1)) { 
                    $result = preg_replace_callback("/(.{{$last_len}})$/", function ($matches) { return strtoupper($matches[1]);}, $result);
                }
                $result .= $l;
                $last_len = 0;
                $prew_upper = false;
                $prev_upper = false;
            }
        }
        return preg_replace("/ $/", '', $result);
    }
    
    public static function metaphoneSimilarity($text1, $text2) {
        similar_text(
            self::translit(self::metaphone($text1)), 
            self::translit(self::metaphone($text2)), 
            $percentage
        );
        return $percentage;
    }
    
    public static function similarity($text1, $text2) {
        similar_text(
            self::translit($text1), 
            self::translit($text2), 
            $percentage
        );
        return $percentage;
    }
    
    public static function levenshtein($text1, $text2) {
        return levenshtein(
            self::translit(self::metaphone($text1)), 
            self::translit(self::metaphone($text2))
        );
    }
    
    public static function genderSubstitutions($string, $gender='m') {
        $result = preg_replace_callback("/\[([^\]|]*?)\|?([^\]|]*)\]/u", function ($matches) use($gender) {
            if ($gender == 'f') {
                return $matches[2];
            } else {
                return $matches[1];
            }
        }, $string);
        return $result;
    }
    
    public static function smilesSubstitutions($template) {
        $result = $template;
        foreach (self::$smiles_map as $key => $value) {
            $result = preg_replace("/$key/", $value, $result);
        }
        return $result;
    }
    
    private static function shrinkDuplicates($text) {   // –ù—É–∂–Ω–∞ –¥–ª—è metaphone
        return preg_replace("/(.)\\1+/u", "$1", $text);
    }
    
    private static function replaceVovels($text) {      // –ù—É–∂–Ω–∞ –¥–ª—è metaphone
        $result = $text;
        $result = preg_replace("/–π–æ|–∏–æ|–π–µ|–∏–µ/u", '–∏', $result);
        $result = preg_replace("/[–æ—ã—è]/u", '–∞', $result);
        $result = preg_replace("/[–µ—ë—ç]/u", '–∏', $result);
        $result = preg_replace("/—é/u", '—É', $result);
        return $result;
    }

    private static function replaceConsonants($text) {  // –ù—É–∂–Ω–∞ –¥–ª—è metaphone
        $result = $text;
        $result = preg_replace("/–±(?=([–±–≤–≥–¥–∂–∑–∫–ø—Å—Ç—Ñ—Ö—Ü—á—à—â—å]|\b))/u", '–ø', $result);
        $result = preg_replace("/–≤(?=([–±–≤–≥–¥–∂–∑–∫–ø—Å—Ç—Ñ—Ö—Ü—á—à—â—å]|\b))/u", '—Ñ', $result);
        $result = preg_replace("/–≥(?=([–±–≤–≥–¥–∂–∑–∫–ø—Å—Ç—Ñ—Ö—Ü—á—à—â—å]|\b))/u", '–∫', $result);
        $result = preg_replace("/–¥(?=([–±–≤–≥–¥–∂–∑–∫–ø—Å—Ç—Ñ—Ö—Ü—á—à—â—å]|\b))/u", '—Ç', $result);
        $result = preg_replace("/–∂(?=([–±–≤–≥–¥–∂–∑–∫–ø—Å—Ç—Ñ—Ö—Ü—á—à—â—å]|\b))/u", '—à', $result);
        $result = preg_replace("/–∑(?=([–±–≤–≥–¥–∂–∑–∫–ø—Å—Ç—Ñ—Ö—Ü—á—à—â—å]|\b))/u", '—Å', $result);
        $result = preg_replace("/—Ç—Å|–¥—Å/u", '—Ü', $result);
        $result = preg_replace("/—á—Ç–∞/u", '—à—Ç–∞', $result);
        return $result;
    }
    
    private static function removeUnreadable($text) {
        $result = $text;
        $result = preg_replace("/[—å–¨—ä–™-]/u", '', $result);
        return $result;
    }
    
    private static function is_upper($letter) {
        return (bool)  preg_match("/[–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø]/u", $letter);
    }
}
