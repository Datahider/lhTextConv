<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

define('LH_LIB_ROOT', './');

require_once LH_LIB_ROOT . 'lhTextConv/lhTextConv.php';

$keys = ['–í–∏—Ç–∞–≤—Å–∫–∏–π', '–í–∏—Ç–æ–≤—Å–∫–∏–π', '–®–≤–∞—Ä–¥—Å–µ–Ω–µ–≥–≥–µ—Ä', '–®–í–û–†–¶–ò–ù–ï–ì–ò–†', '–í–∏—Ç–µ–Ω–±–µ—Ä–≥', '–í–∏—Ç—Ç–µ–Ω–±–µ—Ä–≥', '–ù–∞—Å–∞–Ω–æ–≤', '–ù–∞—Å–æ–Ω–æ–≤', '–ù–∞—Å—Å–æ–Ω–æ–≤', '–ù–æ—Å–æ–Ω–æ–≤', '–ü–µ—Ä–º–∞–∫–æ–≤', '–ü–µ—Ä–º—è–∫–æ–≤', '–ü–µ—Ä—å–º—è–∫–æ–≤', '–ë–æ—Ä—â', '–ü–ê–õ–ï–¶', '–ü–õ–ê–©', '–©–£–ü'];
$metaphone = ['–í–ò–¢–ê–§–°–ö–ò–ô', '–í–ò–¢–ê–§–°–ö–ò–ô', '–®–í–ê–†–¶–ò–ù–ò–ì–ò–†', '–®–í–ê–†–¶–ò–ù–ò–ì–ò–†', '–í–ò–¢–ò–ù–ë–ò–†–ö', '–í–ò–¢–ò–ù–ë–ò–†–ö', '–ù–ê–°–ê–ù–ê–§', '–ù–ê–°–ê–ù–ê–§', '–ù–ê–°–ê–ù–ê–§', '–ù–ê–°–ê–ù–ê–§', '–ü–ò–†–ú–ê–ö–ê–§', '–ü–ò–†–ú–ê–ö–ê–§', '–ü–ò–†–ú–ê–ö–ê–§', '–ë–ê–†–©', '–ü–ê–õ–ò–¶', '–ü–õ–ê–©', '–©–£–ü'];
$translit = ['Vitavskij', 'Vitovskij', 'Shvardsenegger', 'SHVORTSINEGIR', 'Vitenberg', 'Vittenberg', 'Nasanov', 'Nasonov', 'Nassonov', 'Nosonov', 'Permakov', 'Permjakov', 'Permjakov', 'Borsch', 'PALETS', 'PLASCH', 'SCHUP'];
$similarity = [ false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false ];
$smiles = [ '–ü—Ä–∏–≤–µ—Ç :wink:!' => '–ü—Ä–∏–≤–µ—Ç üòâ!', "–Ø :flushed: —à–∏–∑–µ—é" => '–Ø üò≥ —à–∏–∑–µ—é' ];
$best_match = [
    [["–ü–µ—Ç—è"], "–ü–µ—Ç—è", 0, 100],
    [["–ü—É–ø–∞", "–ü–µ—Ç—è", "–ü–µ–ø–∞"], "–ü–µ—Ç—è", 1, 100],
    [["–ü—Ä–µ–≤–µ", "–ü—Ä–µ–≤–µ–¥", "–ü—Ä–µ–≤–µ–¥ "], "–ü—Ä–∏–≤–µ—Ç", 1, 100],
    [["–ü–æ—Ö–æ–∂–µ—Å—Ç", "–ü–æ—Ö–æ–∂–µ—Å—Ç—å", "–ü–æ—Ö–æ–∂–µ—Å—Ç—å "], "–ü–∞—Ö–æ–∂–µ—Å—Ç—å", 0, 100],
    [["–î–æ–±—Ä–æ–≥–æ", "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"], "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è", 1, 88.235294117647],
    [["–ù–µ", "–ù–µ—Ç"], "–ù–∏", 0, 100],
    [[], "–õ—é–±–∞—è —Ñ–∏–≥–Ω—è", null, 100], // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —Å –ø—Ä–æ—à–ª–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Ç.–∫. –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    [[''], "–õ—é–±–∞—è —Ñ–∏–≥–Ω—è", 0, 0],
];
$commutatives = [
    ["–ü–µ—Ç—è", "–ü–µ–ø–∞"],
    ["–¢—É–∑—è", "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"],
    ["–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ú–∞—Ä–≥–æ—à–∞"]
];

$gender = [
    '–Ø –ø–æ—à[–µ–ª|–ª–∞] –≥—É–ª—è—Ç—å —Ç.–∫. –±—ã–ª[–∞] –ø—å—è–Ω[–∞]' => [ '–Ø –ø–æ—à–µ–ª –≥—É–ª—è—Ç—å —Ç.–∫. –±—ã–ª –ø—å—è–Ω', '–Ø –ø–æ—à–ª–∞ –≥—É–ª—è—Ç—å —Ç.–∫. –±—ã–ª–∞ –ø—å—è–Ω–∞'],
    '–û–Ω[–∞] –±—ã–ª[–∞] –¥—É—Ä–∞[–∫|]' => [ '–û–Ω –±—ã–ª –¥—É—Ä–∞–∫', '–û–Ω–∞ –±—ã–ª–∞ –¥—É—Ä–∞' ],
    '–¢—ã –ø—Ä–∞–≤[–∞][, –¥—Ä—É–≥ –º–æ–π|]!' => [ '–¢—ã –ø—Ä–∞–≤, –¥—Ä—É–≥ –º–æ–π!', '–¢—ã –ø—Ä–∞–≤–∞!' ],
];

$test_metaphone = array_combine($keys, $metaphone);

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞—Ñ–æ–Ω–∞";
foreach ($test_metaphone as $key => $value) {
    $m = lhTextConv::metaphone($key);
    if ($value != $m) {
        echo "FAIL!!! - –ü–æ–ª—É—á–µ–Ω–æ: \"$m\", –æ–∂–∏–¥–∞–ª–æ—Å—å: \"$value\"";
        die();
    }
    echo '.';
}
echo "Ok\n";

$test_translit = array_combine($keys, $translit);
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–∞";
foreach ($test_translit as $key => $value) {
    $t = lhTextConv::translit($key);
    if ($value != $t) {
        echo "FAIL!!! - –ü–æ–ª—É—á–µ–Ω–æ: \"$t\", –æ–∂–∏–¥–∞–ª–æ—Å—å: \"$value\"";
        die();
    }
    echo '.';
}
echo "Ok\n";

$test_similarity = array_combine($keys, $similarity);
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ metaphoneSimilarity";
$last = '';
foreach ($test_similarity as $key => $value) {
    $s = lhTextConv::metaphoneSimilarity($key, $last);
    $equals = ($s == 100);
    if ( $equals != $value ) {
        echo "FAIL!!! - –û–∂–∏–¥–∞–ª–æ—Å—å $key " . ($value ? '—Ä–∞–≤–Ω–æ' : '–Ω–µ —Ä–∞–≤–Ω–æ') . " $last\n";        
        die();
    }
    $last = $key;
    echo '.';
}
echo "Ok\n";

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∞";
foreach ($gender as $key => $value) {
    $f = lhTextConv::genderSubstitutions($key, 'f');
    $m = lhTextConv::genderSubstitutions($key, 'm');
    
    if ($value[0] != $m) {
        echo "FAIL!!! - –ü–æ–ª—É—á–µ–Ω–æ: \"$m\", –æ–∂–∏–¥–∞–ª–æ—Å—å: \"$value[0]\"";
        die();
    }
    echo '.';
    if ($value[1] != $f) {
        echo "FAIL!!! - –ü–æ–ª—É—á–µ–Ω–æ: \"$f\", –æ–∂–∏–¥–∞–ª–æ—Å—å: \"$value[1]\"";
        die();
    }
    echo '.';
}
echo "Ok\n";

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–º–∞–π–ª–æ–≤";
foreach ($smiles as $key => $value) {
    $t = lhTextConv::smilesSubstitutions($key);
    
    if ($value != $t) {
        echo "FAIL!!! - –ü–æ–ª—É—á–µ–Ω–æ: \"$t\", –æ–∂–∏–¥–∞–ª–æ—Å—å: \"$value\"";
        die();
    }
    echo '.';
}
echo "Ok\n";

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º—É—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏";
foreach ($commutatives as $test_set) {
    echo '.';
    $r1 = lhTextConv::metaphoneSimilarity($test_set[0], $test_set[1]);
    $r2 = lhTextConv::metaphoneSimilarity($test_set[1], $test_set[0]);
    if ($r1 != $r2) {
        throw new Exception("$r1 != $r2");
    }
}
echo "Ok\n";

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ bestMatch";
foreach ($best_match as $test_set) {
    echo '.';
    $r = lhTextConv::bestMatch($test_set[0], $test_set[1], $percentage);
    if ($r !== $test_set[2]) {
        throw new Exception("Awaiting $test_set[2], got $r");
    }
    if (round($percentage, 3) != round($test_set[3], 3)) {
        throw new Exception("Awaiting percentage to be $test_set[3], got $percentage");
    }
}
echo "Ok\n";

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ split";

$splits = [
    ["–û —Å–∫–æ–ª—å–∫–æ –Ω–∞–º –æ—Ç–∫—Ä—ã—Ç–∏–π —á—É–¥–Ω—ã—Ö –≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ—Å–≤–µ—â–µ–Ω—å—è –¥—É—Ö. –ò –æ–ø—ã—Ç - —Å—ã–Ω –æ—à–∏–±–æ–∫ —Ç—Ä—É–¥–Ω—ã—Ö, –∏ –≥–µ–Ω–∏–π - –ø–∞—Ä–∞–¥–æ–∫—Å–æ–≤ –¥—Ä—É–≥, –∏ —Å–ª—É—á–∞–π - –±–æ–≥ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", [
        "–û", "—Å–∫–æ–ª—å–∫–æ", "–Ω–∞–º", "–æ—Ç–∫—Ä—ã—Ç–∏–π", "—á—É–¥–Ω—ã—Ö", "–≥–æ—Ç–æ–≤–∏—Ç", "–ø—Ä–æ—Å–≤–µ—â–µ–Ω—å—è", "–¥—É—Ö", ".", "–ò", "–æ–ø—ã—Ç",
        "-", "—Å—ã–Ω", "–æ—à–∏–±–æ–∫", "—Ç—Ä—É–¥–Ω—ã—Ö", ",", "–∏", "–≥–µ–Ω–∏–π", "-", "–ø–∞—Ä–∞–¥–æ–∫—Å–æ–≤", "–¥—Ä—É–≥", ",", "–∏", "—Å–ª—É—á–∞–π",
        "-", "–±–æ–≥", "–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å"
    ]],
    ["–ü—Ä–∏–≤–µ—Ç, –ü–µ—Ç—å, —É –Ω–∞—Å —Å–ª–æ–º–∞–ª—Å—è –ø—Ä–∏–Ω—Ç–µ—Ä.",["–ü—Ä–∏–≤–µ—Ç", ",", "–ü–µ—Ç—å", ",", "—É", "–Ω–∞—Å", "—Å–ª–æ–º–∞–ª—Å—è", "–ø—Ä–∏–Ω—Ç–µ—Ä", "."]]
];
foreach ($splits as $test_set) {
    echo '.';
    $r = lhTextConv::split($test_set[0]);
    if ((count($test_set[1]) == 0) && (count($r) != 0)) {
        throw new Exception("Awaiting result to be empty but got: ". print_r($r, true));
    }
    for ($index = 0; $index < count($test_set[1]); $index++) {
        if ($test_set[1][$index] != $r[$index]) {
            throw new Exception("Awaiting lexemme $index to be ". $test_set[1][$index]. " but got: ". print_r($r[$index], true));
        }
    }
}
echo "Ok\n";
